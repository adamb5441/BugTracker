@model BugTracker.Models.Ticket

@{
    ViewBag.Title = "Edit";
}

@{
    bool onhold = Model.TicketStatus.Name == "On Hold";
    bool canchange = User.IsInRole("Admin") || User.IsInRole("Project Manager");
}
@if (onhold && !canchange)
{
    <h2 style="text-align: center">Ticket On Hold</h2>
    <p style="text-align: center">The ticket is being held for review and should be made availible shortly</p>
}
else
{
    using (Html.BeginForm(new { @class = "contact-form" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Created)
        <div class="form-horizontal well" style="margin: 10px 20% 0px">
            <h2>
                Edit Ticket


                @*@if (User.IsInRole("Admin"))
                {
                    <button id="deletebtn" style="float: right" class="btn btn-danger"><i class="fa fa-trash-o "></i></button>
                }*@
            </h2>

            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)
            <div style="padding: 10px 50px 0px">
                @if (User.IsInRole("Admin") || User.IsInRole("Project Manager"))
                {
                    <div class="form-group">
                        @Html.Label("Project", htmlAttributes: new { @class = "" })
                        <div>
                            @Html.DropDownList("ProjectId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ProjectId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                <div class="form-group">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "" })
                    <div class="">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group padding-lg ">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "" })
                    <div class="">
                        @Html.TextAreaFor(model => model.Description, new{ @class = "comment form-control" } )
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
                @if (User.IsInRole("Admin") || User.IsInRole("Project Manager"))
                {

                    <div class="form-group padding-lg ">
                        @Html.Label("Assigned To", htmlAttributes: new { @class = "" })
                        <div class="">
                            @Html.DropDownList("AssignedToUserId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.AssignedToUserId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group padding-lg ">
                        @Html.Label("Ticket Status", htmlAttributes: new { @class = "" })
                        <div class="">
                            @Html.DropDownList("TicketStatusId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.TicketStatusId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                <div class="form-group padding-lg ">
                    @Html.Label("Ticket Priority", htmlAttributes: new { @class = "" })
                    <div class="">
                        @Html.DropDownList("TicketPriorityId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TicketPriorityId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group padding-lg ">
                    @Html.Label("Ticket Type", htmlAttributes: new { @class = "" })
                    <div class="">
                        @Html.DropDownList("TicketTypeId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TicketTypeId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group padding-lg ">
                    <div class="">
                        <input type="submit" value="Save" class="btn btn-default" />
                    </div>
                </div>
            </div>
        </div>
    }
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        var TicketId = @Model.Id;
        $("#deletebtn").click(() => {

            const swalWithBootstrapButtons = Swal.mixin({
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false,
            })

            swalWithBootstrapButtons.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'No, cancel!',
                reverseButtons: true,
                timer: 6000000,
                preConfirm: (login) => {
                    return fetch(`/Tickets/Delete/${TicketId}`, { method: 'post' })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(response.statusText)
                            }
                        })
                        .catch(error => {
                            Swal.showValidationMessage(
                                `Request failed: ${error}`
                            )
                        })
                },
                allowOutsideClick: () => !Swal.isLoading()

            }).then((result) => {

                if (result.value) {
                    swalWithBootstrapButtons.fire(
                        'Deleted!',
                        'Your file has been deleted.',
                        'success'
                    )
                } else if (
                    // Read more about handling dismissals
                    result.dismiss === Swal.DismissReason.cancel
                ) {
                    swalWithBootstrapButtons.fire(
                        'Cancelled',
                        'Your file is safe.',
                        'error'
                    )
                }
            })

        })
    </script>
}
