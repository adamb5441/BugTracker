@model BugTracker.Models.Project
@using Microsoft.AspNet.Identity
@using BugTracker.Helpers
@{
    ViewBag.Title = "Edit";
}

@{
    var userId = User.Identity.GetUserId();
}

<div class="well" style="margin: 10px 20% 0px">
    <h2>
        Edit Project

        @if (User.IsInRole("Admin"))
        {
            <button id="deletebtn" style="float: right" class="btn btn-danger"><i class="fa fa-trash-o "></i></button>
        }
    </h2>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <p class="text-danger">
            @ViewBag.ticketWarning
        </p>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        <div style="padding: 10px 50px 0px">
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.Label("Archive ticket", null, htmlAttributes: new { @class = "control-label " })
                <div class="">
                    @Html.CheckBoxFor(model => model.Archived, null)
                </div>
            </div>
            @if (User.IsInRole("Admin"))
            {
                <div class="form-group">
                    @Html.Label("Add yourself to the project", null, htmlAttributes: new { @class = "control-label " })
                    <div class="">
                        @Html.DropDownList("Admin", null, "none", htmlAttributes: new { @class = "form-control" })
                    </div>
                </div>

                <div>

                </div>
                <div class="form-group">
                    @Html.Label("Choose Project Manager", null, htmlAttributes: new { @class = "control-label " })
                    <div class="">
                        @Html.DropDownList("ProjectManager", null, "none", htmlAttributes: new { @class = "form-control" })
                    </div>
                </div>
            }
            <div class="form-group">
                @Html.Label("Choose Submitter", null, htmlAttributes: new { @class = "control-label " })
                <div class="">
                    @Html.DropDownList("Submitter", null, "none", htmlAttributes: new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                @Html.Label("Choose Developers", null, htmlAttributes: new { @class = "control-label " })
                <div class="">
                    @Html.ListBox("Developer", null, htmlAttributes: new { @class = "form-control" })
                </div>
            </div>

            <div class="form-group">
                <div class="">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>

    }
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        var projectId = @Model.Id;
        $("#deletebtn").click(() => {

            const swalWithBootstrapButtons = Swal.mixin({
                confirmButtonClass: 'btn btn-success',
                cancelButtonClass: 'btn btn-danger',
                buttonsStyling: false,
            })

            swalWithBootstrapButtons.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'No, cancel!',
                reverseButtons: true,
                preConfirm: (login) => {
                    return fetch(`/Projects/Delete/${projectId}`, { method: 'post' })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(response.statusText)
                            }
                            return window.location.replace("/")
                        })
                        .catch(error => {
                            Swal.showValidationMessage(
                                `Request failed: ${error}`
                            )
                        })
                },
                allowOutsideClick: () => !Swal.isLoading()

            }).then((result) => {

                if (result.value) {
                    swalWithBootstrapButtons.fire(
                        'Deleted!',
                        'Your file has been deleted.',
                        'success'
                    )
                } else if (
                    // Read more about handling dismissals
                    result.dismiss === Swal.DismissReason.cancel
                ) {
                    swalWithBootstrapButtons.fire(
                        'Cancelled',
                        'Your imaginary file is safe :)',
                        'error'
                    )
                }
            })

        })
    </script>
}